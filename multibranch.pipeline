import jenkins.branch.BranchSource
import jenkins.branch.MultiBranchProject
import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject
import jenkins.plugins.git.GitSCMSource
import jenkins.scm.impl.trait.RegexSCMHeadFilterTrait

// Create a Multibranch Pipeline job
def jenkinsInstance = Jenkins.instance
def jobName = 'example' // Name of the multibranch job

// Check if the job already exists
if (jenkinsInstance.getItem(jobName) == null) {
    // Create a new Multibranch Pipeline job
    WorkflowMultiBranchProject mbp = jenkinsInstance.createProject(WorkflowMultiBranchProject.class, jobName)

    // Set up the Git source with credentials and branch filter
    def gitSource = new GitSCMSource('12121212', 'https://github.com/jenkinsci/job-dsl-plugin.git', '', 'github-ci', '', false)

    // Add branch sources to the Multibranch Pipeline job
    gitSource.setTraits([new RegexSCMHeadFilterTrait('JENKINS-.*')]) // Only include branches that match the pattern
    mbp.getSourcesList().add(new BranchSource(gitSource))

    // Save the job configuration
    mbp.save()

    println("Multibranch Pipeline job '${jobName}' created successfully!")
} else {
    println("Job '${jobName}' already exists!")
}

import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject
import jenkins.plugins.git.GitSCMSource

// Specify the Multibranch Pipeline job name
def jobName = 'example' // Replace with your actual Multibranch Pipeline job name

// Get the Jenkins instance and find the job
def job = Jenkins.instance.getItemByFullName(jobName)

if (job instanceof WorkflowMultiBranchProject) {
    println "Multibranch Pipeline Job Information for: ${jobName}"

    // Print the full name of the multibranch pipeline job
    println "Job Full Name: ${job.fullName}" // Unique full name
    println "Job URL: ${job.url}" // URL of the job
    
    // Retrieve the branch sources and print the Git SCM ID (if using Git)
    job.sourcesList.each { source ->
        def scmSource = source.source
        if (scmSource instanceof GitSCMSource) {
            println "Git Repository ID: ${scmSource.id}" // The Git source ID
            println "Git Remote URL: ${scmSource.remote}" // Git repository URL
        }
    }
} else {
    println "Job '${jobName}' is not a Multibranch Pipeline."
}
#list multibranch pipelines inside a folder
import jenkins.model.Jenkins
import com.cloudbees.hudson.plugins.folder.Folder

// Specify the folder name
def folderName = 'Foldername'

// Get the Jenkins instance and find the folder
def folder = Jenkins.instance.getItemByFullName(folderName)

if (folder instanceof Folder) {
    println "Jobs in Folder '${folderName}':"
    folder.items.each { job ->
        println "- Job Name: ${job.name}, Job Type: ${job.getClass()}"
    }
} else {
    println "Folder '${folderName}' not found or is not a Folder."
}


#list multibranch properties

import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject
import jenkins.plugins.git.GitSCMSource

// Specify the Multibranch Pipeline job name
def jobName = 'folder/multibranchname' // Replace with your actual Multibranch Pipeline job name

// Get the Jenkins instance and find the job
def job = Jenkins.instance.getItemByFullName(jobName)

if (job instanceof WorkflowMultiBranchProject) {
    println "Multibranch Pipeline Job Information for: ${jobName}"

    // Print the full name of the multibranch pipeline job
    println "Job Full Name: ${job.fullName}" // Unique full name
    println "Job URL: ${job.url}" // URL of the job
    
    // Retrieve the branch sources and print the Git SCM ID (if using Git)
    job.sourcesList.each { source ->
        def scmSource = source.source
        if (scmSource instanceof GitSCMSource) {
            println "Git Repository ID: ${scmSource.id}" // The Git source ID
            println "Git Remote URL: ${scmSource.remote}" // Git repository URL
        }
    }
} else {
    println "Job '${jobName}' is not a Multibranch Pipeline."
}


############update repoid

import jenkins.model.Jenkins
import org.jenkinsci.plugins.workflow.multibranch.WorkflowMultiBranchProject
import jenkins.plugins.git.GitSCMSource
import jenkins.branch.BranchSource

// Full path to the Multibranch Pipeline job
def jobName = 'example'  // Replace with your actual job name

// Get the Jenkins instance and find the job
def job = Jenkins.instance.getItemByFullName(jobName)

if (job instanceof WorkflowMultiBranchProject) {
    println "Found Multibranch Pipeline Job: ${jobName}"
    
    // Get the current Git branch source
    def gitSource = null
    job.sourcesList.each { source ->
        if (source.source instanceof GitSCMSource) {
            gitSource = source
        }
    }
    
    if (gitSource != null) {
        // Remove the existing Git source
        println "Removing existing Git SCM Source with ID: ${gitSource.source.id}"
        job.sourcesList.remove(gitSource)
        
        // Create a new Git SCM source with a new ID
        def newId = '1122334455'  // Set your new desired ID here
        def newGitSource = new GitSCMSource(newId, 'https://pdidev.visualstudio.com/DefaultCollection/transpac/_git/YourRepo', '', 'ado-account', '', false)
        
        // Add the new Git source to the job
        job.sourcesList.add(new BranchSource(newGitSource))
        
        // Save the job configuration
        job.save()
        
        println "New Git SCM Source added with ID: ${newId}"
    } else {
        println "No Git SCM Source found for the job '${jobName}'."
    }
    
} else {
    println "Job '${jobName}' is not a Multibranch Pipeline."
}
###########################################################################

pipeline {
 
    environment {
        
        //put your own environment variables
        REGISTRY_URI = 
}
 
    stages {
        stage('Initial Notification') {
            steps {
                 //put webhook for your notification channel 
                 echo 'Pipeline Start Notification'
            }
        }
stage('Code Analysis') {           
            steps {
               //put your code scanner 
                echo 'Code Scanning and Analysis'
            }
        }
 
        stage('Robot Testing') {
            steps {
                //put your Testing
                echo 'Robot Testing Start'
            }
            post{
                success{
                    echo "Robot Testing Successfully"
                }
                failure{
                    echo "Robot Testing Failed"
                }
            }
        }
stage("Build"){
            steps {
steps {withCredentials([usernamePassword(credentialsId: 'YOUR_ID_DEFINED', passwordVariable: 'YOUR_PW_DEFINED', usernameVariable: 'YOUR_ACCOUNT_DEFINED')]) {
                    sh """
                    docker login ${REGISTRY_URI} -u ${YOUR_ACCOUNT_DEFINED} -p ${YOUR_PW_DEFINED}
                    """
                }
echo "Docker Build"
sh """
                docker build -t ${IMAGE_NAME}:${VERSION_PREFIX}${BUILD_NUMBER} ${WORKSPACE} -f Dockerfile
                """
echo "Docker Tag"
sh """
                    docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${GIT_COMMIT}
                    docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${BUILD_NUMBER}
                    docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${LATEST}
                """
                
                echo "Docker Push"
sh """
                    docker push ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${GIT_COMMIT}
                    docker push ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${BUILD_NUMBER}
                    docker push ${REGISTRY_URI}/${REGISTRY_NAME}/${IMAGE_NAME}:${GIT_BRANCH}-${LATEST}
                """
 
            }
            post{
                success{
                    echo "Build and Push Successfully"
                }
                failure{
                    echo "Build and Push Failed"
                }
            }
        }
stage('Image Scan') {
            steps {
                //Put your image scanning tool 
                echo 'Image Scanning Start'
            }
            post{
                success{
                    echo "Image Scanning Successfully"
                }
                failure{
                    echo "Image Scanning Failed"
                }
            }
        }
stage("Deploy to Production"){
            when {
                branch 'master'
            }
            steps { 
                kubernetesDeploy kubeconfigId: 'kubeconfig-credentials-id', configs: 'YOUR_YAML_PATH/your_k8s_yaml', enableConfigSubstitution: true  // REPLACE kubeconfigId
 
             }
            post{
                success{
                    echo "Successfully deployed to Production"
                }
                failure{
                    echo "Failed deploying to Production"
                }
            }
        }
stage("Deploy to Staging"){
            when {
                branch 'staging'
            }
            steps {
                kubernetesDeploy kubeconfigId: 'kubeconfig-credentials-id', configs: 'YOUR_YAML_PATH/your_k8s_yaml', enableConfigSubstitution: true  // REPLACE kubeconfigId
             }
            post{
                success{
                    echo "Successfully deployed to Staging"
                }
                failure{
                    echo "Failed deploying to Staging"
                }
            }
        }
}
 
    post{
        always{
step([
             //put your Testing
            ])
        }
        success{
            //notification webhook
            echo 'Pipeline Execution Successfully Notification'
}
        failure{
            //notification webhook
            echo 'Pipeline Execution Failed Notification'
}
    }
}
