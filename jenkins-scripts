println(hudson.util.Secret.fromString("siva-ado-account").getEncryptedValue())
com.cloudbees.plugins.credentials.SystemCredentialsProvider.getInstance().getCredentials().forEach{println it.dump().replace(' ', '\n')}
Jenkins.instance.queue.clear()


import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
import jenkins.model.Jenkins
import hudson.security.ACL

// Your credential ID
def credentialId = "linux-agent-ssh-key"

// Get all SSH credentials
def creds = CredentialsProvider.lookupCredentials(
    BasicSSHUserPrivateKey.class,
    Jenkins.instance,
    ACL.SYSTEM,
    null,
    null
)

// Find the one with your ID
def target = creds.find { it.id == credentialId }

if (target) {
    println "Username: ${target.username}"

    def keySource = target.getPrivateKeySource()

    if (keySource instanceof BasicSSHUserPrivateKey.DirectEntryPrivateKeySource) {
        println "Private Key:\n${keySource.getPrivateKey()}"
    } else if (keySource instanceof BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource) {
        println "Private key is stored at: ${keySource.getPrivateKeyFile()}"
    } else {
        println "Private key source is not a supported type."
    }
} else {
    println "Credential ID '${credentialId}' not found."
}


openssl s_client -connect transpac-jenkins.pdidev.com:443 -showcerts > jenkins.crt
keytool -import -alias jenkins -keystore $JAVA_HOME/jre/lib/security/cacerts -file jenkins.crt
It will prompt for a password. The default password is changeit.

keytool -list -v -keystore "C:\Program Files\Microsoft\jdk-11.0.17.8-hotspot\lib\security\cacerts"
keytool -list -v -keystore "C:\Program Files\Microsoft\jdk-11.0.17.8-hotspot\lib\security\cacerts" -alias jenkins


Jenkins.instance.pluginManager.plugins.each { plugin ->
    println("${plugin.getDisplayName()} (${plugin.getShortName()}): ${plugin.getVersion()}")
}


Jenkins.instance.getAllItems(Job.class).each { job ->
    job.builds.each { build ->
        if (build.isBuilding()) {
            println "Job Name: ${job.fullName}, Build Number: ${build.number}, URL: ${build.absoluteUrl}, Duration: ${build.durationString}"
        }
    }
}


//Disable all jenkins nodes
import jenkins.model.Jenkins

// Get all nodes (agents) in Jenkins
Jenkins.instance.computers.each { computer ->
    if (computer.isOnline()) {
        computer.setTemporarilyOffline(true, new hudson.slaves.OfflineCause.ByCLI("Disabled by script"))
        println("Agent ${computer.name} has been disabled.")
    }
}


//Enable all jenkins nodes

import jenkins.model.Jenkins

// Get all nodes (agents) in Jenkins
Jenkins.instance.computers.each { computer ->
    if (computer.isTemporarilyOffline()) {
        computer.setTemporarilyOffline(false, null)
        println("Agent ${computer.name} has been enabled.")
    }
}



//cancel jobs

import hudson.model.Queue

def queue = Jenkins.instance.queue

// Iterate through the build queue
queue.items.each { item ->
    def jobName = item.task.fullDisplayName
    def buildDuration = item.task.estimatedDuration
   println "Cancelling job: ${buildDuration} with estimated duration: ${buildDuration}ms"

    // Define your criteria for jobs to be cancelled, for example:
    // If the job duration is more than a certain threshold or any other condition
    if (buildDuration == -1) { // Check if it's matching some criteria
        println "Cancelling job: ${jobName} with estimated duration: ${buildDuration}ms"
        queue.cancel(item) // Cancel the queued job
    }
}

#Stop All the running jobs
Jenkins.instance.getAllItems(Job.class).each { job ->
    job.builds.each { build ->
        if (build.isBuilding()) {
            println "Aborting Job: ${job.fullName}, Build Number: ${build.number}, URL: ${build.absoluteUrl}"
            build.doStop() // This will stop the build
        }
    }
}

import hudson.model.Queue

def queue = Jenkins.instance.queue

// Iterate through the build queue
queue.items.each { item ->
    def jobName = item.task.fullDisplayName
    def buildDuration = item.task.estimatedDuration

    // Define your criteria for jobs to be cancelled, for example:
    // If the job duration is more than a certain threshold or any other condition
    if (buildDuration > 0) { // Check if it's matching some criteria
        println "Cancelling job: ${jobName} with estimated duration: ${buildDuration}ms"
        queue.cancel(item) // Cancel the queued job
    }
}


Jenkins.instance.getAllItems(Job.class).each { job ->
    job.builds.each { build ->
        if (build.result == Result.ABORTED) {
            println "Deleting ${job.fullName} - Build #${build.number} - ${build.timestampString}"
            build.delete()  // Deletes the aborted build
        }
    }
}



// Iterate over all jobs in Jenkins
Jenkins.instance.getAllItems(Job.class).each { job ->
    // Check if the job is a pipeline (workflow job) and has no builds
    if (job instanceof org.jenkinsci.plugins.workflow.job.WorkflowJob && job.builds.isEmpty()) {
        println "Deleting pipeline with no builds: ${job.fullName}"
        
        try {
            // Delete the job
            job.delete()
            println "Successfully deleted: ${job.fullName}"
        } catch (Exception e) {
            println "Failed to delete: ${job.fullName}. Error: ${e.message}"
        }
    }
}

