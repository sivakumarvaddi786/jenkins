println(hudson.util.Secret.fromString("siva-ado-account").getEncryptedValue())
com.cloudbees.plugins.credentials.SystemCredentialsProvider.getInstance().getCredentials().forEach{println it.dump().replace(' ', '\n')}
Jenkins.instance.queue.clear()

Jenkins.instance.pluginManager.plugins.each { plugin ->
    println("${plugin.getDisplayName()} (${plugin.getShortName()}): ${plugin.getVersion()}")
}


Jenkins.instance.getAllItems(Job.class).each { job ->
    job.builds.each { build ->
        if (build.isBuilding()) {
            println "Job Name: ${job.fullName}, Build Number: ${build.number}, URL: ${build.absoluteUrl}, Duration: ${build.durationString}"
        }
    }
}

#disable jenkins nodes
import jenkins.model.Jenkins

// Get all nodes (agents) in Jenkins
Jenkins.instance.nodes.each { node ->
    // Set node to offline
    node.setTemporarilyOffline(true, new hudson.slaves.OfflineCause.ByCLI("Disabled by script"))
    println("Node ${node.displayName} has been disabled.")
}
#enable jenkins nodes back

import jenkins.model.Jenkins
// Get all nodes (agents) in Jenkins
Jenkins.instance.nodes.each { node ->
    // Set node to online
    node.setTemporarilyOffline(false, null)
    println("Node ${node.displayName} has been enabled.")
}


import hudson.model.Queue

def queue = Jenkins.instance.queue

// Iterate through the build queue
queue.items.each { item ->
    def jobName = item.task.fullDisplayName
    def buildDuration = item.task.estimatedDuration
   println "Cancelling job: ${buildDuration} with estimated duration: ${buildDuration}ms"

    // Define your criteria for jobs to be cancelled, for example:
    // If the job duration is more than a certain threshold or any other condition
    if (buildDuration == -1) { // Check if it's matching some criteria
        println "Cancelling job: ${jobName} with estimated duration: ${buildDuration}ms"
        queue.cancel(item) // Cancel the queued job
    }
}

#Stop All the running jobs
Jenkins.instance.getAllItems(Job.class).each { job ->
    job.builds.each { build ->
        if (build.isBuilding()) {
            println "Aborting Job: ${job.fullName}, Build Number: ${build.number}, URL: ${build.absoluteUrl}"
            build.doStop() // This will stop the build
        }
    }
}

import hudson.model.Queue

def queue = Jenkins.instance.queue

// Iterate through the build queue
queue.items.each { item ->
    def jobName = item.task.fullDisplayName
    def buildDuration = item.task.estimatedDuration

    // Define your criteria for jobs to be cancelled, for example:
    // If the job duration is more than a certain threshold or any other condition
    if (buildDuration > 0) { // Check if it's matching some criteria
        println "Cancelling job: ${jobName} with estimated duration: ${buildDuration}ms"
        queue.cancel(item) // Cancel the queued job
    }
}


Jenkins.instance.getAllItems(Job.class).each { job ->
    job.builds.each { build ->
        if (build.result == Result.ABORTED) {
            println "Deleting ${job.fullName} - Build #${build.number} - ${build.timestampString}"
            build.delete()  // Deletes the aborted build
        }
    }
}



// Iterate over all jobs in Jenkins
Jenkins.instance.getAllItems(Job.class).each { job ->
    // Check if the job is a pipeline (workflow job) and has no builds
    if (job instanceof org.jenkinsci.plugins.workflow.job.WorkflowJob && job.builds.isEmpty()) {
        println "Deleting pipeline with no builds: ${job.fullName}"
        
        try {
            // Delete the job
            job.delete()
            println "Successfully deleted: ${job.fullName}"
        } catch (Exception e) {
            println "Failed to delete: ${job.fullName}. Error: ${e.message}"
        }
    }
}

