def branch = 'test'
def repoUrl = 'https://bitbucket.example-group.com/scm/xxx/example-app.git'

pipeline {
    agent any
    tools {
        maven '3'
        jdk '11 (OpenJDK)'
    }
    stages {
        stage('Checkout example-app') {
            steps {
                git branch: branch,
                    credentialsId: 'gitCred',
                    url: repoUrl
            }
        }
        stage('Create version') {
            steps {
                script {
                    currentDateTime = sh script: """
                        date +"-%Y%m%d_%H%M"
                        """.trim(), returnStdout: true
                    version = currentDateTime.trim()  // the .trim() is necessary
                    echo "version: " + version
                }
            }
        }
        stage('Build and deploy') {
            ...
        }
        stage('Adding the version to the latest commit as a tag') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                        credentialsId: 'gitCred',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                        git config --global credential.username $GIT_USERNAME
                        git config --global credential.helper '!f() { echo password=$GIT_PASSWORD; }; f'
                    '''
                    sh """
                        git tag ${version}
                        git push ${repoUrl} --tags
                    """
                }
            }
        }
    }
}


    - powershell: |
        # Retrieve latest Git tag
        $latestTag = git describe --tags --abbrev=0

        # Parse major, minor, and patch versions from the tag
        $versionNumbers = $latestTag -split '\.'
        $MAJOR = $versionNumbers[0]
        $MINOR = $versionNumbers[1]
        $PATCH = $versionNumbers[2]

        # Increment version components based on the branch name
        if ($env:BUILD_SOURCEBRANCH -match '^feature/.*') {
          $MINOR++
          $PRE_RELEASE = "alpha.$env:BUILD_BUILDID"
        }
        elseif ($env:BUILD_SOURCEBRANCH -match '^release/.*') {
          $MINOR++
          $PATCH++
          $PRE_RELEASE = "beta.$env:BUILD_BUILDID"
        }
        elseif ($env:BUILD_SOURCEBRANCH -match '^bugfix/.*') {
          $PATCH++
          $PRE_RELEASE = "rc.$env:BUILD_BUILDID"
        }

        # Output calculated version
        $VERSION = "$MAJOR.$MINOR.$PATCH-$PRE_RELEASE"
        Write-Host "##vso[task.setvariable variable=VERSION]$VERSION"
      displayName: 'Determine Version'
    env:
      BUILD_SOURCEBRANCH: $(Build.SourceBranch)
      BUILD_BUILDID: $(Build.BuildId)
