pipeline {
    agent { 
        node {
          label 'transpac-hng'
          customWorkspace 'C:/jenkins/wkspc/test1/HyperDocsNG'
        }
    }
    stages {
        stage('check branch') {
          steps {
            script {
                def branchName = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                echo "Current branch name is: ${branchName}"
            }
          }
        }
        stage('check the version') {            
          steps {
            script {
                def buildNumber = currentBuild.number
                echo "Build number is ${currentBuild.number}"
                def currentTag = sh(returnStdout: true, script: "git describe --abbrev=0 --match *.*.*.* 2> /dev/null || echo 0.0.0.0").trim()
                def branchName = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                sh "echo $currentTag"
                def tagParts = currentTag.tokenize('.')
                if (branchName == 'develop') {
                    env.VERSION = "${tagParts[0].replaceFirst('^v', '')}.${tagParts[1].toInteger() + 1}.${tagParts[2]}.${tagParts[3]}"
                    sh "echo new version is $env.VERSION"
                } else if (branchName.startsWith('feature/')) {
                    env.VERSION = "${tagParts[0].replaceFirst('^v', '')}.${tagParts[1]}.${tagParts[2].toInteger() + 1}.${tagParts[3]}"
                    sh "echo new version is $env.VERSION"
                } else if (branchName.startsWith('release/')) {
                    env.VERSION = "${tagParts[0].replaceFirst('^v', '')}.${tagParts[1]}.${tagParts[2].toInteger() + 1}.${tagParts[3]}"
                    sh "echo new version is $env.VERSION"
                }  else {
                    env.VERSION = "${tagParts[0].replaceFirst('^v', '').toInteger() + 1}.${tagParts[1]}.${tagParts[2]}.${tagParts[3]}"
                    sh "echo new version is $env.VERSION"
                   }
            }
          }  
        }
    }
}


pipeline {
    agent any
    
    environment {
        GIT_TAG_PREFIX = 'v' // Specify the prefix for your tags, e.g., 'v' for version tags
        GIT_COMMIT_MSG = 'Automated tag bump' // Specify the commit message for the tag bump
    }

    stages {
        stage('Bump Git Tag') {
            steps {
                script {
                    // Assuming you have already checked out your Git repository in the workspace

                    // Get the latest tag from the repository
                    def latestTag = sh(script: 'git describe --tags --abbrev=0', returnStdout: true).trim()

                    // Parse and increment the version number
                    def tagParts = latestTag.tokenize('.')
                    def major = tagParts[0] as int
                    def minor = tagParts[1] as int
                    def patch = tagParts[2] as int
                    patch++
                    def newTag = "${major}.${minor}.${patch}"

                    // Create and push the new tag
                    sh "git tag -a ${GIT_TAG_PREFIX}${newTag} -m '${GIT_COMMIT_MSG}'"
                    sh "git push origin ${GIT_TAG_PREFIX}${newTag}"
                }
            }
        }
    }
}

